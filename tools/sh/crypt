#!/bin/bash

EXT=(java json yml md js yaml xml properties MF sh)

PUBLIC_KEY="-----BEGIN PGP PUBLIC KEY BLOCK-----

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
=0WOu
-----END PGP PUBLIC KEY BLOCK-----"

PRIVATE_KEY="-----BEGIN PGP PRIVATE KEY BLOCK-----

lQWGBGOB5R0BDADXYfKQQxXWW+dEXEQD0aSjKA+7rxUvdt4H3y4x+PcdtKBBdjMM
IHcjjNyN7J3z3TzmcSkdj08QiKM8Id8LJOGjVFO6pHV2HQf4G21vTeRWhm2G4kXd
YWDsLka+cgP5vjGoP5Ft6ua+m6GxW5sFMLg/eN94IomrGWTtqFVtAM3n0LlOLG33
pH3cAdiJLqTHdu1KeGk3fzVo4LyRgWsHX9uA1leTFVEj32tSbqU8sK/uWfqb154r
BPICNTxzCr/EJmAm4dWQa3K3YnaJB2f9fDp5mxqc9ocLumQvBFUNFQBX8xx2as0p
oydkKzhThxP4aoad60j29EvWh8vtAbLRJI+JxmHQ9Dz337ZlZfg0haSiOM/i0lnY
Qs0mzYfxV+Z4uL9FTPtioFI2v7L2hwfQ80NduL6/6hW/Im5m75wKGg78gp5ja+Za
aIvMnLcKZYarj8WrAbrVx5CpCT2f3HSZ1+6iTJoAxC3ge6qcbs6EsRX/j7OlXtj4
4X9IS4W+mDob6MUAEQEAAf4HAwIks3B+NRCCzcq3TBCu4W2sAlxpW+Fs0szyzsL0
i+rN/baIRR5CxuhuE9jOaEan2OijgaBRIqhlDQisHGdpYjEgsqOZ9s/ANceVswSe
nmJ9D2GCvMGcxnBKMeoPdqyltn0zw8IHNM4zD3LaheaDTR5xO5uu+99tzg+iQ2EO
A2ktmwEdzexF6Dqux4WQVn8X/kPk5UseKcN6JNDH54qF8ugs2FhwPk+uS4chTCmA
JJYJY+66n7S1sI9ZKCShqUvMsLHt3K0+V1gK5Y/XQmHlKfhb9OhtOPdOOPxk7aDA
DxbmmCi7prGqa4raBRYT0ydWD2KL8J/3sFqEl5lm7Xo0vfb2zkuJr3VkCyJty9qh
wjV/cVsOjgtvjaDZeNFLEXwvq+jZi34D6KpLp2kN0Hgmy0h035k+SdnGTGs6IhxY
IulDhGLkL/XbYre+RAtDAZYZ+wLLb6B+O8AxDvbb4+9797M0CDA2LcPYbGmdXI7l
Y9vT/7lsxxa6ZOUPWHznvQEChbyOkao+FIgxQD9BzH3UQZHQnIynOKuSDRbhcY3N
78PBb0g/o+VZh5vPyzUEWi8dyoaWWNQj7oMYXegVgiikJAF6u4C9hDcDhYOp19cV
kcafSx57grpre8blSLlw65NpqcgxuO/EeiYVse++3jTVDbP8aR9Y5TZZ60m6ZLHO
cNOtrVov61RUvSCkGq7uk/GK7XLROMJEawhpBxOvs64/HloVeiM8yE2bnDgLmgRw
QspHud+rOOLeyLhlOZ7PLErcq1Dm4WeIkeCPe/vdK17J/N/PHdO9YwVWgsqhleWX
rNeIGNuL1GWRvhZVhsnT2NSqPeRlt2sqdvOnpGDUKg4INTS+ankta0n+vwuHcZ6h
gFugZn7AVOK4lwrWr7OCFRqvyVYwb6N5p2Vm8KuDv2v9n6evIAs7BLBTMaxwITQ8
I92LHoyahr1dltcdigT6+mD62Jr7dRC8xV1umJYmn+Vr1ZNReyhgGKR6NK/91KG2
nCM5xrHetK9WLEyojOlVyehqzMTchWbyY9fyOOtXxmcQOVHEc3F4n+4n9oLtAG29
4P9EWEsRJldNPJuyOzDJczWXuDwXeSN8fc+D3pkpoSbsbE7XJGkskC6H2F0UW8fQ
UXgGt0A4nUnlVeR4Q6Txwb8CXx3NNkwYcKEu4dkFclS2QILaKFAKJuaqqSCPQ1pU
2ScMFnrwgNenE7+Lxrkmy54GUP2K8SgOizTgp8nwVpKnEGfNOv6yCjqlo4P2TTM7
ebbh5EmfM/fqY4eEEJmIk5JCe6xOydzns01odVpZbh6/5Kj1/P6q6vF6n2NoTAQy
5zj7TRtT3ZVJZf5LnvJOYh8l65X2m+D1LbQSaHpoemh6IDxoekBoei5jb20+iQHO
BBMBCAA4FiEEW8KaY+aQJzHVBY7kXG5SDbcUHEMFAmOB5R0CGwMFCwkIBwIGFQoJ
CAsCBBYCAwECHgECF4AACgkQXG5SDbcUHEPVcQv+Kj+LPS8pAMNBfROZsM8OzIea
uPow3xDOII9zlsmgdsx2E3K13QqveoclHy2/0wYYTTC2WC6ipkDWgLjP4bSgDdyx
ge7rwmaADhTHIr2MjLyBNGd0hw2qIKNOhdDObIiBR34arICPMwQDaa/aLygvzfd3
ziF3Z1iZ3pD97oeAqD3zWhhGBgyLCJrzNEk5vgpfxm0hVO1ndHdLrK8wy5KhSlBE
DOClbNKOgvyEYdt+4O4Ih5C2KGF2Dv/rrwZXrE5LGyOAXb1NfLBsYE/ICaLVI09P
zBqyuzhYV/hHslTp7Ei+4LoBGtR6oipELWu0x5esbEemtWsJv4yAspvpMamKj+pj
o+ku+/QJrYSPVZwnbXrUoBpWvTg9jdvKf6yrPdRXhG9OLL0vdk8pMZoBh4XJPBnM
p4w2O7A4CqPlIFMmg21YXRttCttoPmbMaSOYAgyby6uaI4X5AKFLHhN2EwahUquV
/+KvxRSiUuKEW+Euwi3ax3wWeQTRfhkRPX2yXOfJnQWGBGOB5R0BDADvZSCaJ6o5
BXsbdKNY5zPBu5Hqyrl6HTGbQds/0Pn5AExKzwylBpx1W/IGdQ2E8bxUe0OSQojv
EDDMFOAdculsNgK7BQnxmoWiTQdn5o5RbGyi9RFacI1g9hWGusOPsmcbdJ1ft+oP
e1zmQhtbixOTvJzS5/AmrBK+xmYvjR7OKqC49TLwMAfd/sFapu+Zzj2tX9AJjiqZ
nN83yWSgyqsomSC7/1tg8oeMKpj05FbNIm4u4JIF76gC77nUM4QLPE8EyWJXA6d4
4dM4O6AQAoAt62b14wJdYy0WEevIWSGrZImgWBj/I28TtE7vsYuvldBuZlEOG3jM
kzMFc/lHEGOhDcdr5VtvFI7K4g5UBe3dUFiD48BZKEgyt3/Y6/DDi56/6HtOvtSx
BDnzCaw6WKY089bWBPq8Ux+9S06PcvrlOBbuuJArpe1QBNaIUrHN36T19SSungZi
hbVIMEu0Qhc43CF00cYqCk/ylh+0t6MnQLvyaMjjkNgo7Cr3SblWIrsAEQEAAf4H
AwIjfeuTetYtqcqOBua1RXqis7elHjlf7YmdqEt9gsgweVHvMUshAiG1yZ54s+ol
6+4dtwoZN22OCJW7mniQ7hveyIorMok2D6666yba2YJfN4bjQN1iceqUojcCEqAx
jMPMGwtLl9uvibNfNnhkvu3e2Ie4v1el7Mx8f56Z7nbTtq7Ugi1K+M6rNHjboSaB
8pBA5Xmq8qktSY9WGfBcsnP5itX7FdWfWIEelakrf7UfPPK6wzrJV8hG1KxQ27NH
EthkWuQuBJUdek5BnEAOODV7ETI1d7ANAT7NIsFS4O/5M1EFbw/yJqkj/c8IeOW3
e+CoI5zBx799ErhcF9JzXDJbh+9Y0h5xH66xJmsZQtQPJSgxuRlrRhCjMA+Ykwej
+XrG9NKwUBozh0Ikm+tyjCGZewOtImaKhNy14IPknCQe0Y4uV/U7B9+7L98FyrAx
AZZhqj893sa9PZv+mfXAZtQjN9jzRHfK/kqaf2tu/eluzZpwoJREy9NO8bNLo7tV
D5WsMw5ShsgUp0lln8U5xlS4/4SSgFi7IE0UKL2Y/JykgVCgVlsIwyjwbESZJI7m
rVVhm6U/SBXsjs2UmkRIcUGRAF4Z+VGMSAnXoPzSKGDksdmLAS9rRUwdtxfwYQxj
KRCh8kwdG2zIpo3Gh+ANR2AdnXtXCSHyCbGnUF/Td4z39UWvUMgmYEVuJ5GuVCfo
fKjCKCOr58cPU4bVn6Jg+f+AVvb0pdiqbT5RSEA2dHoHqf1tZle+Irb2SXN9R50o
fthEzdyYYb+3as1cAIUYV4sdeXypvIDsnXCTlOWQ1nKP7Whvw9k0CYuUoriLtGbw
Euzp2Pkj2zngiejRat1zZwS8Mvgy3D9FI2CsbO2WeVzmkJZ7ZNgWdLv/HB9lTXGf
sBeeFl3jJvyjwe5gd/Q1ojVzBO4ezeIRgrIjvaJiFNcLhpjBkR2CP6PDgdynS6tt
uDI5wqy1D2Q1DZuZmDlal3b94B/TlTb1Q/OwhS7KVXzv2OjOHnyjwr6umFtNVjHa
Cz0Zcqli/hya6xJ1i4VmZNzUFq3m/frc0isW3AobFX8+CCG2tJUUfJXc+LrZ9OL1
XYejSgflIrRL1hA8ZRzoGl5btx0TJXnNWXZ3w+v0ijkCKQdvY9ZK7cEjzu6uEUr1
GhmcPcnWAhox9DAYg3XI1BLFwu/DcHDSAZACS+glrf5l7I/DZYzOaHdCYsoRq3YP
SbSad8NsYeY6gKfKCIN3x41y4bNKnvy9hdeVHYtv05vYU7ynE6/PrAyW+t6OP1M9
+coTNpvJoyyXBp2AGTyOc4GSTNbHmIJTyFSh6txLxZsBlNbjWg8pg0dNJ7kFgFPM
PMGXmxdiN4kBtgQYAQgAIBYhBFvCmmPmkCcx1QWO5FxuUg23FBxDBQJjgeUdAhsM
AAoJEFxuUg23FBxDL50L/0ls7iF9v5kCMDvq5FOB0mA7IvqjZAInkX2xicjIHQTy
uqMHn1lUEVJRHOhAq1Chid1h7GkGAgqRqQ45Lq8OgM8egMcu9EsWHuTGqcRFkcqP
w1dLUupYq+9qqN2B73S1qro9eBc6DeK0E8wp5Qm/yWY2XIXFdNt5XJSnWyEllRMn
UiQoYx91QOVfH/yM8sAoBCpKJ/uHYXyW8zgpjXUEsY5KZJWia5ycw/2L+vZpM8SL
4Il7490mmzlvovCuu/CcCAR4v+bfAgML83phzzHqOdnT/01z622+HV9TXE/Ix+Yo
U3GGI+y1WVNq8EohorQbtVLO7eiFD1kzFca0vKc5LhUThtlizxwEAOanlx5OinkC
BSxlI3ssyB41Qfr8tqi9Pr1Ax8AiNww7RJLwLLqwi9khwQX4qygZEQRiL3GPy5yL
FiEFs5+J6Vp8WVbVaGtxXD2FRfC4l0JmcNoiXCI+tlhC3zMGiq4JJeISHQfuyKYZ
ZSpgzi0fK/eU371lBLPipw==
=YiOF
-----END PGP PRIVATE KEY BLOCK-----"

USER_ID='hz@hz.com'

PUBLIC_ID="5BC29A63E6902731D5058EE45C6E520DB7141C43"

SECRET_ID="5BC29A63E6902731D5058EE45C6E520DB7141C43"

CUR_DIR=$(basename "$(pwd)")

function encrypt() {

    echo "open git bash, enter into project root path firstly"
    read -rp "project root path is [${CUR_DIR}], is it correct?(y/N) "

    if [[ ${REPLY} == "y" ]]; then
        echo "mvn clean for decreasing size"
        mvn clean > /dev/null 2>&1
        cd ..
        # sh -c start sub shell environment, so variable should be exported
        export i=0
        for ext in "${EXT[@]}"; do
            export ext
            find "${CUR_DIR}" -name "*.${ext}" -exec sh -c 'f="$1"; mv -- "$f" "${f%.${ext}}.log${i}"' \;
            ((i=i + 1))
        done
        tar -zcf log.tar.gz "${CUR_DIR}"
        # gpg is whether installed or not
        if ! gpg --list-keys | grep -q "${PUBLIC_ID}"; then
            gpg --import <<EOF
${PUBLIC_KEY}
EOF
        fi
        gpg --encrypt --output log.gz --recipient ${USER_ID} log.tar.gz
        echo "encrypted data is log.gz"
        rm -rf log.tar.gz
    fi
}


function decrypt() {

    echo "script will decrypt log.gz"
    if ! gpg --list-secret-keys | grep -q ${SECRET_ID}; then
        gpg --import <<EOF
${PRIVATE_KEY}
EOF
    fi

    # decrypt with gpg
    gpg --decrypt --output log.tar.gz log.gz || exit 1

    # get project root path
    project_path=$(tar -ztf log.tar.gz | sed -n 1p)

    echo "project path: ${project_path}"

    # unzip
    tar -zxf log.tar.gz || exit 1

    cd "${project_path}" || exit 1

    find . -name "*.log*" -type -f -print0 | while IFS= read -r -d '' file; do
        ext=${file##*.}
        prefix=${file%.*}
        case $ext in
            log0)
                mv "${file}" "${prefix}".java
                ;;
            log1)
                mv "${file}" "${prefix}".json
                ;;
            log2)
                mv "${file}" "${prefix}".yml
                ;;
            log3)
                mv "${file}" "${prefix}".md
                ;;
            log4)
                mv "${file}" "${prefix}".js
                ;;
            log5)
                mv "${file}" "${prefix}".yaml
                ;;
            log6)
                mv "${file}" "${prefix}".xml
                ;;
            log7)
                mv "${file}" "${prefix}".properties
                ;;
            log8)
                mv "${file}" "${prefix}".MF
                ;;
            log9)
                mv "${file}" "${prefix}".sh
                ;;
            *)
                echo "${file} is not supported"
                ;;
        esac
    done
}

function usage() {
    echo "NAME"
    echo "        crypt: encrypt/decrypt project. Additionally, encrypt/decrypt only one project everytime"
    echo "SYNOPSIS"
    echo "        crypt [OPTIONS]"
    echo "DESCRIPTION"
    echo "        -h"
    echo "            display help infomation"
    echo "        -e"
    echo "            encrypt mode: encrypt one java backend project which managemed by maven"
    echo "        -d"
    echo "            decrypt mode: decrypt one project"
}

# :h silent mode, print no error messages, error is handled by me
while getopts ":hed" opt; do
    case ${opt} in
        h)
            usage
            exit 1
            ;;
        e)
            encrypt
            ;;
        d)
            decrypt
            ;;
        :)
            echo "Error: -${OPTARG} requires an argument."
            ;;
        ?)
            usage
            exit 1
            ;;
    esac
done


# find . -name "*.log0" -exec sh -c 'f="{}"; mv -- "$f" "${f%.log0}.java"' \;
# find . -name "*.log1" -exec sh -c 'f="{}"; mv -- "$f" "${f%.log1}.json"' \;
# find . -name "*.log2" -exec sh -c 'f="{}"; mv -- "$f" "${f%.log2}.yml"' \;
# find . -name "*.log3" -exec sh -c 'f="{}"; mv -- "$f" "${f%.log3}.md"' \;
# find . -name "*.log4" -exec sh -c 'f="{}"; mv -- "$f" "${f%.log4}.js"' \;
# find . -name "*.log5" -exec sh -c 'f="{}"; mv -- "$f" "${f%.log5}.yaml"' \;
# find . -name "*.log6" -exec sh -c 'f="{}"; mv -- "$f" "${f%.log6}.xml"' \;
# find . -name "*.log7" -exec sh -c 'f="{}"; mv -- "$f" "${f%.log7}.properties"' \;
# find . -name "*.log8" -exec sh -c 'f="{}"; mv -- "$f" "${f%.log8}.MF"' \;
# find . -name "*.log9" -exec sh -c 'f="{}"; mv -- "$f" "${f%.log9}.sh"' \;
