#!/bin/bash

EXT=(java json yml md js yaml xml properties MF sh)

PUBLIC_KEY="-----BEGIN PGP PUBLIC KEY BLOCK-----

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
=0WOu
-----END PGP PUBLIC KEY BLOCK-----"

USER_ID='hz@hz.com'

PUBLIC_ID="5BC29A63E6902731D5058EE45C6E520DB7141C43"

SECRET_ID=""

function encrypt() {
    mvn clean
    export i=0
    for ext in "${EXT[@]}"; do
        export ext
        find . -name "*.${ext}" -exec sh -c 'f="{}"; mv -- "$f" "${f%.$ext}.log$i"' \;
        i=$((i + 1))
    done
    tar -zcf log.tar.gz .
    gpg --list-keys | grep -q $PUBLIC_ID
    if [[ $? != 0 ]]; then
        gpg --import <<EOF
$PUBLIC_KEY
EOF
    fi
    gpg --encrypt --output log.gz --recipient $USER_ID log.tar.gz
}


function decrypt() {

    gpg --list-secret-keys | grep -q $SECRET_ID
    if [[ $? != 0 ]]; then
        gpg --import <<EOF
$SECRET_ID
EOF
    fi

    # decrypt with gpg
    gpg --decrypt --output log.tar.gz log.gz
    rm -rf log.gz
    # unzip
    tar -zxf log.tar.gz
    for file in $(find . -name "*.log*" -type f -print); do
        ext=${file##*.}
        basename=${file%.*}
        case $ext in
            log0)
                mv $file ${basename}.java
                ;;
            log1)
                mv $file ${basename}.json
                ;;
            log2)
                mv $file ${basename}.yml
                ;;
            log3)
                mv $file ${basename}.md
                ;;
            log4)
                mv $file ${basename}.js
                ;;
            log5)
                mv $file ${basename}.yaml
                ;;
            log6)
                mv $file ${basename}.xml
                ;;
            log7)
                mv $file ${basename}.properties
                ;;
            log8)
                mv $file ${basename}.MF
                ;;
            log9)
                mv $file ${basename}.sh
                ;;
            *)
                echo "$file is not supported"
                ;;
        esac
    done
}

if [[ $1 == "e" ]]; then
    encrypt
elif [[ $1 == "d" ]]; then
    decrypt
else
    echo "crypt e: encrypt data"
    echo "crypt d: decrypt data"
fi
